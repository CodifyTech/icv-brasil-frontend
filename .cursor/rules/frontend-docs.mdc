# ICV Brasil Frontend - Documenta√ß√£o T√©cnica

## üìã Metadados do Projeto

- **Nome**: ICV Brasil Frontend
- **Vers√£o**: 9.3.0
- **Linguagem**: TypeScript 5.7.2
- **Framework**: Vue 3.5.13 + Vite 5.4.11
- **UI Library**: Vuetify 3.7.5 (Material Design)
- **Package Manager**: pnpm 10.15.0
- **Estado**: Em desenvolvimento ativo

## üèóÔ∏è Contexto T√©cnico Global

### Arquitetura Principal

- **Vue 3 Composition API**: Framework moderno com Composition API
- **Vite**: Build tool ultra-r√°pido com HMR e code splitting
- **TypeScript**: Tipagem est√°tica rigorosa para desenvolvimento seguro
- **Vuetify 3**: Framework UI Material Design completo
- **Pinia**: Gerenciamento de estado (sucessor do Vuex)
- **Vue Router**: Roteamento SPA com lazy loading

### Stack de Desenvolvimento

- **Auto-imports**: unplugin-auto-import para APIs Vue
- **Componentes**: unplugin-vue-components para importa√ß√£o autom√°tica
- **Roteamento**: unplugin-vue-router para file-based routing
- **Linting**: ESLint com regras customizadas e TypeScript
- **Estilos**: SCSS + PostCSS + Stylelint
- **Testes**: Vitest + MSW para mocking

### Depend√™ncias Cr√≠ticas

- **@tiptap/* (2.10.3)**: Editor de texto rico WYSIWYG
- **ApexCharts (3.54.1)**: Gr√°ficos interativos avan√ßados
- **Chart.js (4.4.7)**: Biblioteca de gr√°ficos flex√≠vel
- **vue-i18n (10.0.4)**: Sistema de internacionaliza√ß√£o
- **Maska (2.1.11)**: M√°scaras de input avan√ßadas
- **@casl/ability (6.7.2)**: Controle de acesso baseado em roles

## üìö Guidelines de Desenvolvimento

### Padr√£o de Importa√ß√£o

- **unplugin-auto-import**: APIs Vue, composables e utilit√°rios
- **unplugin-vue-components**: Componentes globais automaticamente
- **Aliases**: `@/` para `src/`, `@core/` para utilit√°rios core
- **Lazy Loading**: Componentes e rotas carregados sob demanda

### Uso de Stores (Pinia)

- **Composition API**: Stores usando `defineStore` com setup syntax
- **TypeScript**: Tipagem forte para state, getters e actions
- **Modularidade**: Um store por dom√≠nio de neg√≥cio
- **Persist√™ncia**: Estado persistido quando necess√°rio

### Rotas Modulares

- **File-based Routing**: Estrutura baseada em arquivos em `src/pages/`
- **Lazy Loading**: Rotas carregadas sob demanda
- **Guards**: Prote√ß√£o baseada em permiss√µes CASL
- **Layouts**: Sistema de layouts flex√≠vel com `src/layouts/`

### Estiliza√ß√£o

- **Vuetify**: Componentes base Material Design
- **SCSS**: Pr√©-processador com vari√°veis e mixins
- **CSS Modules**: Escopo local quando necess√°rio
- **Responsividade**: Mobile-first com breakpoints Vuetify

### Internacionaliza√ß√£o

- **vue-i18n**: Sistema completo de i18n
- **Lazy Loading**: Tradu√ß√µes carregadas sob demanda
- **Formata√ß√£o**: Datas, n√∫meros e moedas localizadas
- **Fallbacks**: Idioma padr√£o quando tradu√ß√£o n√£o encontrada

### Testes

- **Vitest**: Framework de testes moderno e r√°pido
- **MSW**: Mock Service Worker para APIs
- **Coverage**: Relat√≥rios de cobertura autom√°ticos
- **E2E**: Playwright para testes end-to-end

## üöÄ Prompts Pr√©-configurados

### 1. Auditoria Global

```
Analise o projeto ICV Brasil Frontend e identifique:
- Poss√≠veis problemas de performance
- Depend√™ncias desatualizadas ou conflitantes
- Oportunidades de otimiza√ß√£o
- Riscos de seguran√ßa
- Sugest√µes de refatora√ß√£o
```

### 2. Refatora√ß√£o de Componentes

```
Refatore o componente [NOME] seguindo as melhores pr√°ticas:
- Use Composition API com TypeScript
- Implemente lazy loading quando apropriado
- Adicione valida√ß√£o de props
- Implemente error boundaries
- Otimize re-renders
- Adicione testes unit√°rios
```

### 3. Documenta√ß√£o de M√≥dulos

```
Crie documenta√ß√£o completa para o m√≥dulo [NOME]:
- Vis√£o geral e prop√≥sito
- API p√∫blica (props, events, slots)
- Exemplos de uso
- Casos de teste
- Depend√™ncias e compatibilidade
- Guia de troubleshooting
```

### 4. Revis√£o de Seguran√ßa

```
Realize auditoria de seguran√ßa para o m√≥dulo [NOME]:
- Valida√ß√£o de inputs
- Sanitiza√ß√£o de dados
- Controle de acesso (CASL)
- Prote√ß√£o XSS/CSRF
- Auditoria de depend√™ncias
- Recomenda√ß√µes de seguran√ßa
```

### 5. Testes Unit√°rios (Vitest)

```
Crie testes unit√°rios para [COMPONENTE/SERVICE/STORE]:
- Testes de renderiza√ß√£o
- Testes de intera√ß√£o
- Testes de edge cases
- Mocks apropriados
- Cobertura de c√≥digo
- Testes de acessibilidade
```

### 6. Performance & Otimiza√ß√£o

```
Otimize a performance do [COMPONENTE/FUNCIONALIDADE]:
- Lazy loading e code splitting
- Memoiza√ß√£o e computed properties
- Otimiza√ß√£o de re-renders
- Bundle size analysis
- Lighthouse scores
- Core Web Vitals
```

### 7. Sugest√£o de Arquitetura

```
Sugira melhorias na arquitetura para [DOM√çNIO]:
- Organiza√ß√£o de stores Pinia
- Estrutura de rotas e layouts
- Separa√ß√£o de responsabilidades
- Padr√µes de comunica√ß√£o
- Estrat√©gias de cache
- Escalabilidade futura
```

## üîß Comandos √öteis

```bash
# Desenvolvimento
pnpm dev                    # Servidor de desenvolvimento
pnpm build                  # Build de produ√ß√£o
pnpm preview                # Preview do build
pnpm typecheck              # Verifica√ß√£o de tipos

# Qualidade
pnpm lint                   # Linting e corre√ß√£o
pnpm format                 # Formata√ß√£o de c√≥digo
pnpm build:icons            # Build de √≠cones

# Depend√™ncias
pnpm update                 # Atualizar depend√™ncias
pnpm audit                  # Auditoria de seguran√ßa
pnpm outdated               # Verificar depend√™ncias desatualizadas
```

## üìÅ Estrutura de Pastas Importante

```
src/
‚îú‚îÄ‚îÄ @core/           # Utilit√°rios core (plugins, utils)
‚îú‚îÄ‚îÄ @layouts/        # Layouts da aplica√ß√£o
‚îú‚îÄ‚îÄ components/      # Componentes reutiliz√°veis
‚îú‚îÄ‚îÄ composables/     # Composables Vue 3
‚îú‚îÄ‚îÄ pages/           # P√°ginas (file-based routing)
‚îú‚îÄ‚îÄ stores/          # Stores Pinia
‚îú‚îÄ‚îÄ services/        # Servi√ßos de API
‚îú‚îÄ‚îÄ types/           # Defini√ß√µes TypeScript
‚îú‚îÄ‚îÄ validators/      # Valida√ß√µes de formul√°rios
‚îî‚îÄ‚îÄ locales/         # Tradu√ß√µes i18n
```

## üéØ Padr√µes de C√≥digo

### Vue 3 Composition API

```typescript
<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useUsersStore } from '@/stores/users'

// Props com valida√ß√£o
interface Props {
  userId: string
  readonly?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  readonly: false
})

// Emits tipados
const emit = defineEmits<{
  update: [value: string]
  delete: [id: string]
}>()

// Composables
const usersStore = useUsersStore()
const loading = ref(false)

// Computed properties
const user = computed(() => usersStore.getUserById(props.userId))

// Lifecycle
onMounted(async () => {
  loading.value = true
  await usersStore.fetchUser(props.userId)
  loading.value = false
})
</script>
```

### Stores Pinia

```typescript
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { User } from '@/types/user'

export const useUsersStore = defineStore('users', () => {
  // State
  const users = ref<User[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // Getters
  const activeUsers = computed(() => 
    users.value.filter(user => user.active)
  )

  // Actions
  const fetchUsers = async () => {
    loading.value = true
    error.value = null
    
    try {
      const response = await api.get('/users')
      users.value = response.data
    } catch (err) {
      error.value = 'Erro ao carregar usu√°rios'
      throw err
    } finally {
      loading.value = false
    }
  }

  return {
    users,
    loading,
    error,
    activeUsers,
    fetchUsers
  }
})
```

### Componentes Vuetify

```vue
<template>
  <VCard>
    <VCardTitle class="d-flex align-center justify-space-between">
      {{ title }}
      <VBtn
        :icon="mdiPlus"
        variant="text"
        @click="$emit('add')"
      />
    </VCardTitle>
    
    <VCardText>
      <VDataTable
        :headers="headers"
        :items="items"
        :loading="loading"
        :search="search"
        class="elevation-1"
      >
        <template #item.actions="{ item }">
          <VBtn
            :icon="mdiEdit"
            variant="text"
            size="small"
            @click="$emit('edit', item)"
          />
        </template>
      </VDataTable>
    </VCardText>
  </VCard>
</template>
```

---

*Documento gerado para Cursor IDE - √öltima atualiza√ß√£o: Janeiro 2025*
description:
globs:
alwaysApply: false
---
